name: ChatGPT Patch Processor

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply-patch:
    if: contains(github.event.issue.body, '[CHATGPT PATCH]') || contains(github.event.comment.body, '[CHATGPT PATCH]')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract patch from issue/comment body (via event JSON)
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          BODY_FILE="$RUNNER_TEMP/body.txt"
          PATCH_FILE="$RUNNER_TEMP/chatgpt.patch"

          jq -r '.issue.body // .comment.body // empty' "$GITHUB_EVENT_PATH" > "$BODY_FILE"

          echo "---- BEGIN RAW BODY (first 40 lines) ----"
          head -n 40 "$BODY_FILE" || true
          echo "---- END RAW BODY ----"

          awk '
            BEGIN { seen_hdr=0; in_block=0 }
            /\[CHATGPT PATCH\]/ { seen_hdr=1; next }
            seen_hdr && /^```/ { if (!in_block) { in_block=1; next } else { exit } }
            seen_hdr && in_block { print }
          ' "$BODY_FILE" > "$PATCH_FILE"

          echo "---- BEGIN EXTRACTED PATCH (first 80 lines) ----"
          head -n 80 "$PATCH_FILE" || true
          echo "---- END EXTRACTED PATCH ----"

          if [ ! -s "$PATCH_FILE" ]; then
            echo "ERROR: No fenced patch block found after [CHATGPT PATCH]." >&2
            exit 1
          fi

          echo "patch_file=$PATCH_FILE" >> "$GITHUB_OUTPUT"

      - name: Create/refresh dev branch (clean)
        shell: bash
        run: |
          set -e
          rm -f body.txt chatgpt.patch || true
          git rebase --abort || true
          git cherry-pick --abort || true
          git am --abort || true
          git fetch origin --prune

          if git ls-remote --exit-code --heads origin dev >/dev/null 2>&1; then
            git checkout -B dev origin/dev
          else
            git checkout -B dev origin/main || git checkout -B dev main
          fi

          git fetch origin main
          git reset --hard origin/main

      - name: Apply patch and commit (3-way, tolerant)
        shell: bash
        run: |
          set -e
<<<<<<< HEAD
          # FIX: set committer identity globally so commits work
=======
>>>>>>> dfc8143 (Replace workflow: clean dev, safe temp files, identity set; robust PR step (skip when no diffs))
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git rebase --abort || true
          git cherry-pick --abort || true
          git am --abort || true

          PATCH="${{ steps.extract.outputs.patch_file }}"

          if git apply --3way --ignore-space-change --whitespace=fix "$PATCH"; then
            echo "Applied with git apply."
          else
            echo "git apply failed — trying git am..." >&2
            if git am --3way --keep-non-patch "$PATCH"; then
              echo "Applied with git am."
            else
              echo "ERROR: Could not apply patch." >&2
              git am --abort || true
              exit 1
            fi
          fi

          if ! git diff --quiet || ! git diff --cached --quiet; then
            git add -A
            git commit -m "Apply ChatGPT patch from issue #${{ github.event.issue.number }}"
          else
            echo "No changes after applying patch."
          fi

      - name: Push dev branch
        shell: bash
        run: |
          set -e
          git push --force-with-lease origin dev

      - name: Ensure PR dev -> main exists (REST create or update)
        shell: bash
        env:
<<<<<<< HEAD
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # if you added GH_PAT earlier, keep GH_TOKEN:${{ secrets.GH_PAT }}
=======
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # use ${{ secrets.GH_PAT }} if you created a PAT
>>>>>>> dfc8143 (Replace workflow: clean dev, safe temp files, identity set; robust PR step (skip when no diffs))
        run: |
          set -euo pipefail

          OWNER_REPO="${GITHUB_REPOSITORY}"
          OWNER="${OWNER_REPO%%/*}"
          TITLE="ChatGPT Patch from Issue #${{ github.event.issue.number }}"
          BODY="Automated PR created from a [CHATGPT PATCH] in issue #${{ github.event.issue.number }}."

<<<<<<< HEAD
          # Make sure we know if dev is ahead of main
          git fetch origin main dev || git fetch origin
          AHEAD="$(git rev-list --left-right --count origin/main...dev | awk '{print $2}')"
          if [ "${AHEAD:-0}" = "0" ]; then
            echo "dev is not ahead of main; nothing to open/update. Skipping PR step."
            exit 0
          fi

          # Find existing PR dev -> main (any state)
          PR_NUMBER="$(gh api "/repos/${OWNER_REPO}/pulls?head=${OWNER}:dev&base=main&state=all" -q '.[0].number' || true)"

          if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
            gh api -X PATCH "/repos/${OWNER_REPO}/pulls/${PR_NUMBER}" \
              -f state=open -f title="$TITLE" -f body="$BODY" >/dev/null
            echo "Updated PR #$PR_NUMBER"
          else
            gh api -X POST "/repos/${OWNER_REPO}/pulls" \
              -f title="$TITLE" -f head="dev" -f base="main" -f body="$BODY" >/dev/null
            echo "Created PR dev -> main"
          fi

=======
          echo "Fetching main/dev to compare ahead/behind…"
          git fetch origin main dev || git fetch origin

          AHEAD="$(git rev-list --left-right --count origin/main...dev | awk '{print $2}')" || AHEAD=0
          echo "dev ahead of main by ${AHEAD:-0} commits"

          if [ "${AHEAD:-0}" = "0" ]; then
            echo "Nothing to PR (dev == main). Skipping PR creation."
            exit 0
          fi

          echo "Looking for existing PR dev -> main…"
          PR_NUMBER="$(gh api "/repos/${OWNER_REPO}/pulls?head=${OWNER}:dev&base=main&state=all" -q '.[0].number' || true)"

          if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
            echo "Updating existing PR #$PR_NUMBER"
            gh api -X PATCH "/repos/${OWNER_REPO}/pulls/${PR_NUMBER}" \
              -f state=open -f title="$TITLE" -f body="$BODY" >/dev/null
            exit 0
          fi

          echo "Creating new PR dev -> main…"
          set +e
          gh api -X POST "/repos/${OWNER_REPO}/pulls" \
            -f title="$TITLE" -f head="dev" -f base="main" -f body="$BODY" >/dev/null
          STATUS=$?
          set -e

          if [ $STATUS -ne 0 ]; then
            echo "Create failed; checking if a PR already exists (race/422)…"
            PR_NUMBER="$(gh api "/repos/${OWNER_REPO}/pulls?head=${OWNER}:dev&base=main&state=all" -q '.[0].number' || true)"
            if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
              echo "PR already existed (#$PR_NUMBER). Updating title/body."
              gh api -X PATCH "/repos/${OWNER_REPO}/pulls/${PR_NUMBER}" \
                -f state=open -f title="$TITLE" -f body="$BODY" >/dev/null
              exit 0
            fi
            echo "PR creation really failed."
            exit 1
          fi

          echo "Created PR dev -> main."
>>>>>>> dfc8143 (Replace workflow: clean dev, safe temp files, identity set; robust PR step (skip when no diffs))
