name: ChatGPT Patch Intake

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: read
  pull-requests: write

jobs:
  apply-patch:
    if: >
      (github.event_name == 'issues' && contains(github.event.issue.title, '[CHATGPT PATCH]')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '[CHATGPT PATCH]'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine patch source
        id: src
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "PATCH_BODY<<'EOF'" >> $GITHUB_OUTPUT
            echo "${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "PATCH_BODY<<'EOF'" >> $GITHUB_OUTPUT
            echo "${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Extract patch (triple-fenced code block)
        id: extract
        shell: bash
        run: |
          python - << 'PY'
import os, re, sys
body = os.environ.get('PATCH_BODY','')
m = re.search(r"```(?:patch|diff)?\r?\n(.*?)```", body, re.S|re.I)
if not m:
    print("::error::No fenced patch block found. Add a code block with ```patch ... ```"); sys.exit(1)
content = m.group(1).strip()
open('incoming.patch','w',encoding='utf-8').write(content)
print("patch-bytes=",len(content))
PY

      - name: Apply patch
        shell: bash
        run: |
          set -e
          git config user.name  "chatgpt-bot"
          git config user.email "actions@users.noreply.github.com"

          if git am --3way --whitespace=fix incoming.patch; then
            echo "Applied via git am"
          else
            echo "git am failed; trying git apply"
            git apply --whitespace=fix --reject incoming.patch
            git add -A
            git commit -m "Apply ChatGPT patch"
          fi

      - name: Push to dev
        shell: bash
        run: |
          git fetch origin dev || true
          if ! git rev-parse --verify origin/dev >/null 2>&1; then
            git push origin HEAD:refs/heads/dev
          else
            git push origin HEAD:dev
          fi

      - name: Open/Update PR to main
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: dev
          title: "ChatGPT patch → dev"
          body: "Automated patch from ChatGPT workflow."
          base: dev
