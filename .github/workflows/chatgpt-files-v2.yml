name: ChatGPT Files v2 Processor

on:
  workflow_dispatch:
    inputs:
      body:
        description: "Paste your [CHATGPT FILES v2] payload here"
        required: false
        type: string
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Prepare dev branch from main
        run: |
          set -e
          git fetch origin --prune
          if git ls-remote --exit-code --heads origin dev >/dev/null 2>&1; then
            git checkout -B dev origin/dev
          else
            git checkout -B dev origin/main || git checkout -B dev main
          fi
          git fetch origin main
          git reset --hard origin/main

      - name: Extract body
        id: extract
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.body }}" ]; then
            printf "%s" "${{ github.event.inputs.body }}" > body.txt
            echo "Loaded body from manual input."
          else
            jq -r '.issue.body // .comment.body // empty' "$GITHUB_EVENT_PATH" > body.txt || echo "" > body.txt
            echo "Loaded body from event payload."
          fi
          sed -e 's/\r$//' -i body.txt
          echo "----- BODY (first 20 lines) -----"
          head -n 20 body.txt || true
          echo "---------------------------------"

      - name: Detect marker
        id: detect
        run: |
          set -euo pipefail
          if grep -iq '^\[CHATGPT FILES v2\]' body.txt || grep -iq '^\[CHATGPT FILES\]' body.txt; then
            echo "has=true" >> "$GITHUB_OUTPUT"
          else
            echo "has=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and apply changes
        if: steps.detect.outputs.has == 'true'
        run: |
          set -euo pipefail
          awk '
            BEGIN{
              inblk=0; path=""; del=0; n=0; buflen=0;
              print "#!/usr/bin/env bash"
              print "set -euo pipefail"
            }
            function flush(){
              if(!inblk) return;
              p=path; d=del;
              sub(/;delete$/,"",p)
              gsub(/\047/,"'\''",p)
              if(d){
                print "echo DELETE " p
                print "git rm -f -- " "\047" p "\047" " || true"
              } else {
                tag="EOF__" ++n
                print "echo WRITE " p
                print "mkdir -p -- \"$(dirname \047" p "\047)\""
                print "cat > \047" p "\047 <<\047" tag "\047"
                for(i=1;i<=buflen;i++) print buf[i]
                print tag
                print "git add -- " "\047" p "\047"
              }
              inblk=0; path=""; del=0; buflen=0
            }
            /^---file:/ && /---$/{
              flush()
              header=$0
              sub(/^---file:/,"",header)
              sub(/---$/,"",header)
              gsub(/^[ \t]+|[ \t]+$/,"",header)
              path=header; del=0
              if(path ~ /;delete$/){ del=1 }
              inblk=1; buflen=0
              next
            }
            /^---endfile---$/{
              flush(); next
            }
            {
              if(inblk){ buf[++buflen]=$0 }
            }
            END{ flush() }
          ' body.txt > apply.sh

          chmod +x apply.sh
          ./apply.sh

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --staged --quiet; then
            echo "No staged changes."
          else
            git commit -m "Apply ChatGPT FILES v2"
            git push --force-with-lease origin dev
          fi

      - name: Ensure PR dev -> main
        if: steps.detect.outputs.has == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git fetch origin main dev || true
          AHEAD="$(git rev-list --left-right --count origin/main...origin/dev | awk '{print $2}' || echo 0)"
          if [ "${AHEAD:-0}" = "0" ]; then
            echo "Nothing to PR (dev==main)."; exit 0; fi

          PR="$(gh pr list --head dev --base main --state all --json number,state -q '.[0].number' || true)"
          STATE="$(gh pr list --head dev --base main --state all --json number,state -q '.[0].state' || true | tr '[:upper:]' '[:lower:]')"
          TITLE="ChatGPT Files v2"
          BODY="Automated PR from a [CHATGPT FILES v2] submission."

          if [ -n "$PR" ] && [ "$PR" != "null" ]; then
            if [ "$STATE" = "merged" ]; then
              gh api -X POST "/repos/${GITHUB_REPOSITORY}/pulls" -f title="$TITLE" -f head="dev" -f base="main" -f body="$BODY" >/dev/null
            else
              if [ "$STATE" = "closed" ]; then
                gh api -X PATCH "/repos/${GITHUB_REPOSITORY}/issues/$PR" -f state=open >/dev/null
              fi
              gh api -X PATCH "/repos/${GITHUB_REPOSITORY}/pulls/$PR" -f title="$TITLE" -f body="$BODY" >/dev/null
            fi
          else
            gh api -X POST "/repos/${GITHUB_REPOSITORY}/pulls" -f title="$TITLE" -f head="dev" -f base="main" -f body="$BODY" >/dev/null
          fi
